name: Test and build

on:
  push:
    branches:
    - master
    - develop
  pull_request:
    branches:
      - master
      - develop

env:
  HYP3_REGISTRY: 626226570674.dkr.ecr.us-east-1.amazonaws.com
  S3_PYPI_HOST: hyp3-pypi.s3-website-us-east-1.amazonaws.com
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - uses: goanpeca/setup-miniconda@v1
        with:
          auto-update-conda: true
          python-version: 3.7
          activate-environment: hyp3-ci
          environment-file: conda-env.yml
          channels: conda-forge, nodefaults

      - name: Pytest in conda environment
        shell: bash -l {0}
        run: |
          python -m pip install .
          pytest --cov=hyp3_ci

      - name: Safety analysis of conda environment
        shell: bash -l {0}
        run: |
          python -m pip freeze | safety check --full-report --stdin
          conda list --export | awk -F '=' '/^[^#]/ {print $1 "==" $2}' | safety check --full-report --stdin


  package:
    runs-on: ubuntu-latest
    needs: pytest
    outputs:
      SDIST_VERSION:  ${{ steps.build.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel twine s3pypi "setuptools-scm[toml]" importlib_metadata

      - name: Build distribuion and upload to S3-PyPI
        id: build
        run: |
          echo "::set-output name=version::$(python setup.py --version)"
          python setup.py sdist bdist_wheel
          echo "Uploading version $(python setup.py --version) to S3-PyPI"
          s3pypi --bucket hyp3-pypi --force --verbose


  dockerize:
    runs-on: ubuntu-latest
    needs: pytest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          export SDIST_VERSION=${{needs.pytest.outputs.SDIST_VERSION}}
          export CI_JOB_TIMESTAMP=$(date --utc --rfc-3339=seconds)
          echo "Building ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:${SDIST_VERSION/+/_}"
          docker build --no-cache \
                -t ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:${SDIST_VERSION/+/_} \
                --label org.opencontainers.image.created="${CI_JOB_TIMESTAMP}" \
                --label org.opencontainers.image.version="${SDIST_VERSION}" \
                --label org.opencontainers.image.revision="${GITHUB_SHA}" \
                --build-arg S3_PYPI_HOST=${S3_PYPI_HOST} \
                --build-arg SDIST_SPEC="==${SDIST_VERSION}" .
          docker push ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:${SDIST_VERSION/+/_}

      - name: Add test tag
        if: github.ref == 'refs/heads/develop'
        run: |
          export SDIST_VERSION=${{needs.pytest.outputs.SDIST_VERSION}}
          docker tag ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:${SDIST_VERSION/+/_} \
              ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:test
          docker push ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:test

      - name: Add latest tag
        if: github.ref == 'refs/heads/master'
        run: |
          export SDIST_VERSION=${{needs.pytest.outputs.SDIST_VERSION}}
          docker tag ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:${SDIST_VERSION/+/_} \
              ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:latest
          docker push ${HYP3_REGISTRY}/${GITHUB_REPOSITORY##*/}:latest

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${HYP3_REGISTRY}